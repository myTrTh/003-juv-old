<?php

namespace App\TournamentBundle\Repository;

/**
 * CalendarRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CalendarRepository extends \Doctrine\ORM\EntityRepository
{

	public function get_calendar($id) {
		$dql = "SELECT c.tour, c.off
				FROM AppTournamentBundle:Calendar c
				WHERE c.tr = :tr";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $id);

		$result = $query->execute();

		$tours = [];
		for($i=0;$i<count($result);$i++) {
			$tour = $result[$i]['tour'];
			$off = $result[$i]['off'];

			$tours[$tour] = ["tour" => $tour, "off" => $off];
		}

		return $tours;
	}

	public function get_member($tr, $tour, $userId)	{
		$dql = "SELECT c.id 
				FROM AppTournamentBundle:Calendar c
				WHERE c.tr = :tr AND c.tour = :tour AND (c.user1 = :user OR c.user2 = :user)";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr)
					  ->SetParameter("tour", $tour)
					  ->SetParameter("user", $userId);

		$result = $query->execute();

		if(empty($result))
			$res = 0;
		else
			$res = 1;

		return $res;
	}

	public function get_tour($id, $tour, $schema) {

		$dql = "SELECT c.id, c.user1 as uid1, c.user2 as uid2, u1.username AS user1, u2.username AS user2, c.result1, c.result2, c.groups
				FROM AppTournamentBundle:Calendar c
				LEFT JOIN AppUserBundle:User u1
				WHERE u1.id = c.user1
				LEFT JOIN AppUserBundle:User u2
				WHERE u2.id = c.user2
				WHERE c.tr = :tr AND c.tour = :tour";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $id)
					  ->SetParameter("tour", $tour);

		$result = $query->execute();

		$results = [];
		for($i=0;$i<count($result);$i++) {
			$id = $result[$i]['id'];
			$uid1 = $result[$i]['uid1'];
			$uid2 = $result[$i]['uid2'];
			$user1 = $result[$i]['user1'];
			$user2 = $result[$i]['user2'];
			$result1 = $result[$i]['result1'];
			$result2 = $result[$i]['result2'];
			$groups = $result[$i]['groups'];

			$results[$groups][] = ['id' => $id, 'uid1' => $uid1, 'uid2' => $uid2,
				'user1' => $user1, 'user2' => $user2, 'result1' => $result1,
				'result2' => $result2, 'groups' => $groups];
		}

		return $results;
	}	

	public function get_max_tour($tournament) {
		$dql = "SELECT max(c.tour) FROM AppTournamentBundle:Calendar c
				WHERE c.tr = :tr";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tournament);

		$result = $query->execute();
		if(!empty($result))
			$result = $result[0][1];
		else
			$result = 0;

		return $result;
	}

	public function get_info($id) {
		$dql = "SELECT c.tr, c.tour, c.user1, c.user2, u1.username as login1, u2.username as login2 FROM AppTournamentBundle:Calendar c
				INNER JOIN AppUserBundle:User u1
				WHERE u1.id = c.user1
				INNER JOIN AppUserBundle:User u2
				WHERE u2.id = c.user2
				WHERE c.id = :id";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("id", $id);

		$result = $query->execute();

		return $result;
	}

	public function get_pair($tr, $tour) {
		$dql = "SELECT c.id, c.user1, c.user2, c.groups FROM AppTournamentBundle:Calendar c
				WHERE c.tr = :tr AND c.tour = :tour";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr)
					  ->SetParameter("tour", $tour);

		$result = $query->execute();

		return $result;
	}

	public function users_for_tournament($tr, $tour) {
		$dql = "SELECT c.user1, c.user2, c.groups FROM AppTournamentBundle:Calendar c
				WHERE c.tr = :tr AND c.tour = :tour";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr)
					  ->SetParameter("tour", $tour);

		$result = $query->execute();

		$users = [];
		for($i=0;$i<count($result);$i++) {
			$user1 = $result[$i]['user1'];
			$user2 = $result[$i]['user2'];
			$group = $result[$i]['groups'];

			$users[] = ["user" => $user1, "group" => $group];
			$users[] = ["user" => $user2, "group" => $group];
		}

		return $users;
	}

	public function is_playoff($tr) {
		$dql = "SELECT c.tour FROM AppTournamentBundle:Calendar c WHERE c.tr = :tr AND c.off IS NOT NULL";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr);

		$result = $query->execute();

		if(!empty($result))
			$off = 1;
		else
			$off = 0;

		return $off;
	}

	public function get_off_status($tr, $tour) {
		$dql = "SELECT c.tr FROM AppTournamentBundle:Calendar c WHERE c.tr = :tr AND c.tour = :tour
				AND c.user1 = 0 AND c.off IS NOT NULL";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr)
					  ->SetParameter("tour", $tour);

		$result = $query->execute();

		if(!empty($result))
			$off = 1;
		else
			$off = 0;

		return $off;		
	}

	public function get_tours_with_playoff($tr) {
		$dql = "SELECT c.tour, c.user1, c.user2, u1.username as login1, u2.username as login2 FROM AppTournamentBundle:Calendar c
				LEFT JOIN AppUserBundle:User u1
				WHERE u1.id = c.user1
				LEFT JOIN AppUserBundle:User u2
				WHERE u2.id = c.user2
				WHERE c.tr = :tr AND c.off IS NOT NULL";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr);

		$result = $query->execute();

	}

	public function get_tour_of_playoff($tr_id, $tour) {
		$dql = "SELECT c.id FROM AppTournamentBundle:Calendar c
				WHERE c.tr = :tr AND c.tour = :tour AND c.user1 = 0";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr_id)
					  ->SetParameter("tour", $tour);

		$result = $query->execute();

		return $result;
	}

	public function get_games($id) {
		$dql = "SELECT c.id, c.tr, t.name, c.tour, u1.username as username1, u2.username as username2, c.result1, c.result2
				FROM AppTournamentBundle:Calendar c
				INNER JOIN AppTournamentBundle:Tournament t
				WHERE t.id = c.tr
				INNER JOIN AppUserBundle:User u1
				WHERE u1.id = c.user1
				INNER JOIN AppUserBundle:User u2
				WHERE u2.id = c.user2
				WHERE c.result1 IS NOT NULL AND (c.user1 = :user OR c.user2 = :user)
				ORDER BY c.id DESC";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("user", $id)
					  ->SetMaxResults(5);

		$result = $query->execute();

		return $result;
	}

	public function get_games_in_pair($user1, $user2) {
		$dql = "SELECT c.id, c.tr, t.name, c.tour, u1.username as username1, u2.username as username2, c.result1, c.result2
				FROM AppTournamentBundle:Calendar c
				INNER JOIN AppTournamentBundle:Tournament t
				WHERE t.id = c.tr
				INNER JOIN AppUserBundle:User u1
				WHERE u1.id = c.user1
				INNER JOIN AppUserBundle:User u2
				WHERE u2.id = c.user2
				WHERE c.result1 IS NOT NULL AND ((c.user1 = :user1 AND c.user2 = :user2) OR (c.user2 = :user2 AND c.user1 = :user1))
				ORDER BY c.id DESC";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("user1", $user1)
					  ->SetParameter("user2", $user2);

		$result = $query->execute();

		if(empty($result)) {
			$res = 0;
		} else {

			$w1 = 0;
			$w2 = 0;
			$n = 0;
			for($i=0;$i<count($result);$i++) {
				if($i == 0) {
					$user1 = $result[$i]['username1'];
					$user2 = $result[$i]['username2'];
				}

				if($result[$i]['result1'] > $result[$i]['result2']) {

					if($result[$i]['username1'] == $user1) {
						$w1 += 1;
					} else if ($result[$i]['username1'] == $user1) {
						$w2 += 1;
					}

				} else if ($result[$i]['result1'] < $result[$i]['result2']) {
					if($result[$i]['username1'] == $user1) {
						$w2 += 1;
					} else if ($result[$i]['username2'] == $user1) {
						$w1 += 1;
					}

				} else if ($result[$i]['result1'] == $result[$i]['result2']) {
					$n += 1;
				}
			}

			$sum = $w1 + $w2 + $n;

			$res = array("games" => $result, "stats" => ["user1" => [$user1, $w1], "user2" => [$user2, $w2], "n" => $n, "sum" => $sum]);

		}

		return $res;
	}	
}
