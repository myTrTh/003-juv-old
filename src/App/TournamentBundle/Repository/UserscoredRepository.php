<?php

namespace App\TournamentBundle\Repository;

/**
 * UserscoredRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserscoredRepository extends \Doctrine\ORM\EntityRepository
{
	public function get_prescored($userId, $tr, $tour) {
		$dql = "SELECT u.player, u.first, u.second, u.three, u.score
				FROM AppTournamentBundle:Userscored u
				WHERE u.tr = :tr AND u.tour = :tour AND u.user = :user";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter('tr', $tr)
					  ->SetParameter('tour', $tour)
					  ->SetParameter('user', $userId);

		$result = $query->execute();

		$players = [];
		$how = 0;
		for($i=0;$i<count($result);$i++) {
			$player = $result[$i]['player'];
			$first = $result[$i]['first'];
			$second = $result[$i]['second'];
			$three = $result[$i]['three'];
			$score = $result[$i]['score'];

			if($first != 'empty' and $first != 'emptykeeper' and $first != 'null' and $first != 'one' and $first != 'two' and $first != 'three') {
				$how += 1;
			} if($second != 'empty') {
				$how += 1;
			} if($three != 'empty') {
				$how += 1;
			}

			$players[$player] = ['first' => $first, 'second' => $second, 'three' => $three, 'score' => $score];
		}

		$res = array('players' => $players, 'how' => $how);

		return $res;

	}

	public function get_balls($tr, $tour, $forebridge) {
		$dql = "SELECT f.id FROM AppTournamentBundle:Forescored f WHERE f.tr = :tr AND f.tour = :tour AND f.first IS NOT NULL";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr)
					  ->SetParameter("tour", $tour);

		$result = $query->execute();

		if(empty($result))
			$res['started']	= 0;
		else
			$res['started'] = 1;

		$dql = "SELECT u.user, sum(u.score) as summ FROM AppTournamentBundle:Userscored u WHERE u.tr = :tr AND u.tour = :tour
		        GROUP BY u.user";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr)
					  ->SetParameter("tour", $tour);

		$result = $query->execute();


		$usersteps = $this->get_steps($tr, $tour);

		$results = [];
		for($i=0;$i<count($result);$i++) {
			$user = $result[$i]['user'];
			$sum = $result[$i]['summ'];

			if(empty($usersteps[$user] or $usersteps[$user] == 0)) {
				$results[$user] = $sum;
			} else {
				$summ = $sum - $usersteps[$user];
				$results[$user] = $summ;
			}
		}

		$res['members'] = $results;

		return $res;

	}

	public function table_ball($tr, $tour) {
		$dql = "SELECT u.user, sum(u.score) as summ FROM AppTournamentBundle:Userscored u WHERE u.tr = :tr AND u.tour = :tour
		        GROUP BY u.user";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter("tr", $tr)
					  ->SetParameter("tour", $tour);

		$result = $query->execute();

		$usersteps = $this->get_steps($tr, $tour);

		$results = [];
		for($i=0;$i<count($result);$i++) {
			$user = $result[$i]['user'];
			$sum = $result[$i]['summ'];

			if(empty($usersteps[$user] or $usersteps[$user] == 0)) {
				$results[$user] = $sum;
			} else {
				$summ = $sum - $usersteps[$user];
				$results[$user] = $summ;
			}
		}

		return $results;
	}	

	public function get_steps($tr, $tour) {
		$dql = "SELECT u.user, u.first, u.second, u.three
				FROM AppTournamentBundle:Userscored u
				WHERE u.tr = :tr AND u.tour = :tour";

		$query = $this->getEntityManager()->createQuery($dql)
					  ->SetParameter('tr', $tr)
					  ->SetParameter('tour', $tour);

		$result = $query->execute();

		$users = [];
		for($i=0;$i<count($result);$i++) {
			$how = 0;
			$user = $result[$i]['user'];
			$first = $result[$i]['first'];
			$second = $result[$i]['second'];
			$three = $result[$i]['three'];

			if($first != 'empty' and $first != 'emptykeeper' and $first != 'null' and $first != 'one' and $first != 'two' and $first != 'three') {
				$how = 1;
			} if($second != 'empty') {
				$how = 1;
			} if($three != 'empty') {
				$how = 1;
			}

			if(empty($users[$user]))
				$users[$user] = $how;
			else
				$users[$user] += $how;

		}

		return $users;

	}	
}
