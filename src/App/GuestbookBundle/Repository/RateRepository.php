<?php

namespace App\GuestbookBundle\Repository;

/**
 * RateRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class RateRepository extends \Doctrine\ORM\EntityRepository
{
	public function check_rank($id, $userId, $sign)
	{
		$author_and_created = $this->get_author($id);
		$author = $author_and_created['user'];
		$created = $author_and_created['created'];

		if(!$author)
			return false;

		if(!$created)
			return false;

		if($author == $userId)
			return false;

		$order = $this->get_order($author, $userId, $id);
		if($order)
			return false;
		
		return $author;
	}

	private function get_author($id)
	{
		$dql = "SELECT g.user, g.created
				FROM AppGuestbookBundle:Guestbook g
				WHERE g.id = :id";

        $query = $this->getEntityManager()->createQuery($dql)
                ->setParameter('id', $id);

        $result = $query->execute();

        $now_date = new \DateTime();
        $now_date->modify('-3 days');
        if(strtotime($now_date->format('d.m.Y H:i:s')) > strtotime($result[0]['created']->format('d.m.Y H:i:s')))
        	$result[0]['created'] = 0;

        return $result[0];
	}

	private function get_order($author, $userId, $id)
	{
		$dql = "SELECT r.id
				FROM AppGuestbookBundle:Rate r
				WHERE r.message = :message
				AND r.author = :author
				AND r.user = :user";

        $query = $this->getEntityManager()->createQuery($dql)
                ->setParameter('message', $id)
                ->setParameter('author', $author)
                ->setParameter('user', $userId);

        $result = $query->execute();
        return (int) $result;

	}

	public function get_rank_message($id)
	{
		$dql = "SELECT r.sign, u.username
				FROM AppGuestbookBundle:Rate r
				INNER JOIN AppUserBundle:User u
				WHERE r.user = u.id
				WHERE r.message = :id";

        $query = $this->getEntityManager()->createQuery($dql)
                ->setParameter('id', $id);

        $result = $query->execute();
        
        $plus_arr = [];
        $minus_arr = [];
        foreach ($result as $u => $s) {
        	if($s['sign'] == 1)
        		$plus_arr[] = $s['username'];
        	else if($s['sign'] == -1)
        		$minus_arr[] = $s['username'];
        }

        $sum_p = count($plus_arr);
        $sum_m = count($minus_arr);
        $sum = $sum_p - $sum_m;

        $plus = implode(", ", $plus_arr);
        $minus = implode(", ", $minus_arr);

        $rank = ['plus' => $plus, 'minus' => $minus, 'sum' => $sum];

        return $rank;
	}

	public function get_rank_user($user_id)
	{
		$dql = "SELECT sum(r.sign)
				FROM AppGuestbookBundle:Rate r
				WHERE r.author = :author";

        $query = $this->getEntityManager()->createQuery($dql)
                ->setParameter('author', $user_id);

        $result = $query->execute();

        return $result[0][1];
	}

    public function get_rate($guestbook, $username) {

        if(count($guestbook) != 0) {

            $authors = [];
            $gb = [];
            $keys = [];
            for($i=0;$i<count($guestbook);$i++) {
                $authors[] = $guestbook[$i]['user'];
                $gb[] = $guestbook[$i]['id'];
                $keys[] = $guestbook[$i]['id'];
            }

            $last_message = $guestbook[0]['id'];
            $count = count($guestbook);
            $first_message = $last_message - $count;

            $dql = "SELECT r.message, r.sign, u.username
                    FROM AppGuestbookBundle:Rate r
                    INNER JOIN AppUserBundle:User u
                    WHERE r.user = u.id
                    WHERE r.message IN (".implode(', ', $gb).")";

            $query = $this->getEntityManager()->createQuery($dql);

            $result = $query->execute();

            $messages = [];
            for($i=0;$i<count($result);$i++) {

                $message = $result[$i]['message'];
                $sign = $result[$i]['sign'];
                $user = $result[$i]['username'];

                if(empty($messages[$message]['sum']))
                    $messages[$message]['sum'] = 0;

                if(empty($messages[$message]['allow']))
                    $messages[$message]['allow'] = 0;            

                if($sign == 1) {
                    if(empty($messages[$message]['plus']))
                        $messages[$message]['plus'] = $user;
                    else
                        $messages[$message]['plus'] .= ", ".$user;
                    $messages[$message]['sum'] += 1;
                }

                if($sign == -1) {
                    if(empty($messages[$message]['minus']))
                        $messages[$message]['minus'] = $user;
                    else
                        $messages[$message]['minus'] .= ", ".$user;
                    $messages[$message]['sum'] -= 1;
                }

                if($username == $user)
                    $messages[$message]['allow'] +=1;
            }

            foreach ($keys as $key => $k) {
                if(empty($messages[$k]['sum']))
                    $messages[$k]['sum'] = 0;
                if(empty($messages[$k]['allow']))            
                    $messages[$k]['allow'] = 0;
                if(empty($messages[$k]['plus']))            
                    $messages[$k]['plus'] = "";
                if(empty($messages[$k]['minus']))            
                    $messages[$k]['minus'] = "";                
            }

            $authors = array_unique($authors);
            $authors = array_values($authors);

            $rank_user = [];
            for($i=0;$i<count($authors);$i++) {
                $author = $authors[$i];
                $rank_user[$author] = (int) $this->get_rank_user($author);
            }

            return array($messages, $rank_user);
        }
    }

    public function get_my_rate($id) {
        /* up for me */
        $dql = "SELECT r.user, u.username, count(r.sign) as cnt
                FROM AppGuestbookBundle:Rate r
                INNER JOIN AppUserBundle:User u
                WHERE u.id = r.user
                WHERE r.author = :id AND r.sign = 1
                GROUP BY r.user
                ORDER BY cnt DESC";

        $query = $this->getEntityManager()->createQuery($dql)
                ->setParameter("id", $id);

        $up_for_me = $query->execute();

        /* down for me */
        $dql = "SELECT r.user, u.username, count(r.sign) as cnt
                FROM AppGuestbookBundle:Rate r
                INNER JOIN AppUserBundle:User u
                WHERE u.id = r.user
                WHERE r.author = :id AND r.sign = -1
                GROUP BY r.user
                ORDER BY cnt DESC";

        $query = $this->getEntityManager()->createQuery($dql)
                ->setParameter("id", $id);

        $down_for_me = $query->execute();

        /* my_up */
        $dql = "SELECT r.author, u.username, count(r.sign) as cnt
                FROM AppGuestbookBundle:Rate r
                INNER JOIN AppUserBundle:User u
                WHERE u.id = r.author
                WHERE r.user = :id AND r.sign = 1
                GROUP BY r.author
                ORDER BY cnt DESC";

        $query = $this->getEntityManager()->createQuery($dql)
                ->setParameter("id", $id);

        $my_up = $query->execute();

        /* my_down */
        $dql = "SELECT r.author, u.username, count(r.sign) as cnt
                FROM AppGuestbookBundle:Rate r
                INNER JOIN AppUserBundle:User u
                WHERE u.id = r.author
                WHERE r.user = :id AND r.sign = -1
                GROUP BY r.author
                ORDER BY cnt DESC";

        $query = $this->getEntityManager()->createQuery($dql)
                ->setParameter("id", $id);

        $my_down = $query->execute();

        $result = [];
        $result['up_for_me'] = $up_for_me;
        $result['down_for_me'] = $down_for_me;
        $result['my_up'] = $my_up;
        $result['my_down'] = $my_down;

        /* count sum */
        $up_for_me_sum = 0;
        for($i=0;$i<count($up_for_me);$i++)
            $up_for_me_sum += $up_for_me[$i]['cnt'];

        $down_for_me_sum = 0;
        for($i=0;$i<count($down_for_me);$i++)
            $down_for_me_sum += $down_for_me[$i]['cnt'];

        $my_up_sum = 0;
        for($i=0;$i<count($my_up);$i++)
            $my_up_sum += $my_up[$i]['cnt'];

        $my_down_sum = 0;
        for($i=0;$i<count($my_down);$i++)
            $my_down_sum += $my_down[$i]['cnt'];        

        $result['my_up_sum'] = $my_up_sum;
        $result['my_down_sum'] = $my_down_sum;
        $result['my_all_sum'] = $my_up_sum + $my_down_sum;
        $result['up_for_me_sum'] = $up_for_me_sum;
        $result['down_for_me_sum'] = $down_for_me_sum;
        $result['for_me_all_sum'] = $up_for_me_sum - $down_for_me_sum;

        return $result;
    }
}
